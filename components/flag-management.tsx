"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Textarea } from "@/components/ui/textarea"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Label } from "@/components/ui/label"
import { AlertTriangle, Eye, MessageSquare, CheckCircle, Clock, User, Calendar, Filter } from "lucide-react"
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from "recharts"

interface Flag {
  id: string
  agentId: string
  agentName: string
  flagType: "break_duration" | "non_engagement" | "unethical_behavior" | "performance_decline"
  severity: "low" | "medium" | "high" | "critical"
  status: "active" | "investigating" | "resolved" | "dismissed"
  description: string
  detectedAt: string
  resolvedAt?: string
  assignedTo?: string
  confidence: number
  evidence: any
  resolution?: {
    action: string
    notes: string
    resolvedBy: string
    timestamp: string
  }
  escalated: boolean
  autoGenerated: boolean
}

export function FlagManagement() {
  const [flags, setFlags] = useState<Flag[]>([])
  const [selectedFlag, setSelectedFlag] = useState<Flag | null>(null)
  const [filterStatus, setFilterStatus] = useState<string>("all")
  const [filterSeverity, setFilterSeverity] = useState<string>("all")
  const [filterType, setFilterType] = useState<string>("all")
  const [resolutionNotes, setResolutionNotes] = useState("")
  const [resolutionAction, setResolutionAction] = useState("")

  useEffect(() => {
    // Generate sample flag data
    const generateFlags = (): Flag[] => [
      {
        id: "FLAG_001",
        agentId: "AGT_001",
        agentName: "Rajesh Kumar",
        flagType: "break_duration",
        severity: "high",
        status: "active",
        description: "Extended break duration detected: 45 minutes in last 2 hours during peak time",
        detectedAt: "2024-01-15T15:30:00Z",
        confidence: 92,
        evidence: {
          totalBreakTime: 45,
          expectedBreakTime: 20,
          breakFrequency: 3,
          timePattern: "Frequent breaks during peak hours (2-4 PM)",
          callsLost: 8,
          impactScore: 85,
        },
        escalated: false,
        autoGenerated: true,
      },
      {
        id: "FLAG_002",
        agentId: "AGT_002",
        agentName: "Priya Sharma",
        flagType: "non_engagement",
        severity: "critical",
        status: "investigating",
        description: "No calls handled despite active status during high call flow period",
        detectedAt: "2024-01-15T14:15:00Z",
        assignedTo: "TL_001",
        confidence: 98,
        evidence: {
          callsExpected: 12,
          callsHandled: 0,
          activeTime: 90,
          callFlowRate: "High (15 calls/min)",
          systemStatus: "Active",
          lastActivity: "2024-01-15T14:30:00Z",
        },
        escalated: true,
        autoGenerated: true,
      },
      {
        id: "FLAG_003",
        agentId: "AGT_003",
        agentName: "Amit Patel",
        flagType: "unethical_behavior",
        severity: "medium",
        status: "resolved",
        description: "Break status not marked while away from system for extended period",
        detectedAt: "2024-01-15T13:45:00Z",
        resolvedAt: "2024-01-15T16:20:00Z",
        assignedTo: "TL_002",
        confidence: 85,
        evidence: {
          awayTime: 25,
          breakMarked: false,
          lastActivity: "2024-01-15T13:45:00Z",
          systemDetection: "Mouse/keyboard inactive",
          callsAffected: 3,
        },
        resolution: {
          action: "coaching_session",
          notes:
            "Conducted coaching session on proper break marking procedures. Agent acknowledged the issue and committed to following protocol.",
          resolvedBy: "TL_002",
          timestamp: "2024-01-15T16:20:00Z",
        },
        escalated: false,
        autoGenerated: true,
      },
      {
        id: "FLAG_004",
        agentId: "AGT_004",
        agentName: "Sneha Reddy",
        flagType: "performance_decline",
        severity: "medium",
        status: "active",
        description: "Approval rate dropped significantly below threshold in recent sessions",
        detectedAt: "2024-01-15T14:00:00Z",
        confidence: 88,
        evidence: {
          currentApprovalRate: 78,
          expectedRate: 85,
          recentCalls: 15,
          declinePattern: "Consistent decline over last 3 hours",
          previousAverage: 91,
          impactAssessment: "Medium",
        },
        escalated: false,
        autoGenerated: true,
      },
      {
        id: "FLAG_005",
        agentId: "AGT_005",
        agentName: "Vikram Singh",
        flagType: "break_duration",
        severity: "low",
        status: "dismissed",
        description: "Slightly extended break duration detected",
        detectedAt: "2024-01-15T12:30:00Z",
        resolvedAt: "2024-01-15T12:45:00Z",
        confidence: 72,
        evidence: {
          totalBreakTime: 22,
          expectedBreakTime: 20,
          breakFrequency: 1,
          justification: "Medical appointment confirmed",
        },
        resolution: {
          action: "dismissed",
          notes: "Break extension was pre-approved for medical appointment. No action required.",
          resolvedBy: "TL_001",
          timestamp: "2024-01-15T12:45:00Z",
        },
        escalated: false,
        autoGenerated: true,
      },
    ]

    setFlags(generateFlags())
  }, [])

  const handleResolveFlag = (flagId: string) => {
    if (!resolutionAction || !resolutionNotes) return

    setFlags((prev) =>
      prev.map((flag) =>
        flag.id === flagId
          ? {
              ...flag,
              status: "resolved" as const,
              resolvedAt: new Date().toISOString(),
              resolution: {
                action: resolutionAction,
                notes: resolutionNotes,
                resolvedBy: "Current User", // In real app, get from auth
                timestamp: new Date().toISOString(),
              },
            }
          : flag,
      ),
    )

    setSelectedFlag(null)
    setResolutionNotes("")
    setResolutionAction("")
  }

  const handleEscalateFlag = (flagId: string) => {
    setFlags((prev) =>
      prev.map((flag) => (flag.id === flagId ? { ...flag, escalated: true, assignedTo: "MANAGER_001" } : flag)),
    )
  }

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical":
        return "bg-red-100 text-red-800 border-red-200"
      case "high":
        return "bg-orange-100 text-orange-800 border-orange-200"
      case "medium":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "low":
        return "bg-blue-100 text-blue-800 border-blue-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case "active":
        return "bg-red-100 text-red-800 border-red-200"
      case "investigating":
        return "bg-yellow-100 text-yellow-800 border-yellow-200"
      case "resolved":
        return "bg-green-100 text-green-800 border-green-200"
      case "dismissed":
        return "bg-gray-100 text-gray-800 border-gray-200"
      default:
        return "bg-gray-100 text-gray-800 border-gray-200"
    }
  }

  const getFlagTypeIcon = (type: string) => {
    switch (type) {
      case "break_duration":
        return <Clock className="w-4 h-4" />
      case "non_engagement":
        return <User className="w-4 h-4" />
      case "unethical_behavior":
        return <AlertTriangle className="w-4 h-4" />
      case "performance_decline":
        return <Calendar className="w-4 h-4" />
      default:
        return <AlertTriangle className="w-4 h-4" />
    }
  }

  const filteredFlags = flags.filter((flag) => {
    const statusMatch = filterStatus === "all" || flag.status === filterStatus
    const severityMatch = filterSeverity === "all" || flag.severity === filterSeverity
    const typeMatch = filterType === "all" || flag.flagType === filterType
    return statusMatch && severityMatch && typeMatch
  })

  // Generate trend data for the chart
  const flagTrendData = [
    { date: "Jan 10", active: 5, resolved: 8, dismissed: 2 },
    { date: "Jan 11", active: 7, resolved: 6, dismissed: 1 },
    { date: "Jan 12", active: 4, resolved: 9, dismissed: 3 },
    { date: "Jan 13", active: 8, resolved: 5, dismissed: 2 },
    { date: "Jan 14", active: 6, resolved: 7, dismissed: 1 },
    { date: "Jan 15", active: 9, resolved: 4, dismissed: 2 },
  ]

  const statusCounts = {
    active: flags.filter((f) => f.status === "active").length,
    investigating: flags.filter((f) => f.status === "investigating").length,
    resolved: flags.filter((f) => f.status === "resolved").length,
    dismissed: flags.filter((f) => f.status === "dismissed").length,
  }

  return (
    <div className="space-y-6">
      {/* Flag Overview */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <AlertTriangle className="w-8 h-8 text-red-600" />
              <div>
                <p className="text-sm font-medium text-gray-600">Active Flags</p>
                <p className="text-2xl font-bold text-gray-900">{statusCounts.active}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <Eye className="w-8 h-8 text-yellow-600" />
              <div>
                <p className="text-sm font-medium text-gray-600">Investigating</p>
                <p className="text-2xl font-bold text-gray-900">{statusCounts.investigating}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <CheckCircle className="w-8 h-8 text-green-600" />
              <div>
                <p className="text-sm font-medium text-gray-600">Resolved</p>
                <p className="text-2xl font-bold text-gray-900">{statusCounts.resolved}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-6">
            <div className="flex items-center space-x-2">
              <MessageSquare className="w-8 h-8 text-gray-600" />
              <div>
                <p className="text-sm font-medium text-gray-600">Dismissed</p>
                <p className="text-2xl font-bold text-gray-900">{statusCounts.dismissed}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Flag Trends Chart */}
      <Card>
        <CardHeader>
          <CardTitle>Flag Resolution Trends</CardTitle>
          <CardDescription>Daily breakdown of flag status changes over the past week</CardDescription>
        </CardHeader>
        <CardContent>
          <ResponsiveContainer width="100%" height={300}>
            <LineChart data={flagTrendData}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="date" />
              <YAxis />
              <Tooltip />
              <Line type="monotone" dataKey="active" stroke="#ef4444" strokeWidth={2} name="Active" />
              <Line type="monotone" dataKey="resolved" stroke="#10b981" strokeWidth={2} name="Resolved" />
              <Line type="monotone" dataKey="dismissed" stroke="#6b7280" strokeWidth={2} name="Dismissed" />
            </LineChart>
          </ResponsiveContainer>
        </CardContent>
      </Card>

      {/* Filters and Flag Management */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Filter className="w-5 h-5" />
            <span>Flag Management</span>
          </CardTitle>
          <CardDescription>Monitor, investigate, and resolve AI-generated flags</CardDescription>
        </CardHeader>
        <CardContent>
          {/* Filters */}
          <div className="flex space-x-4 mb-6">
            <Select value={filterStatus} onValueChange={setFilterStatus}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Status</SelectItem>
                <SelectItem value="active">Active</SelectItem>
                <SelectItem value="investigating">Investigating</SelectItem>
                <SelectItem value="resolved">Resolved</SelectItem>
                <SelectItem value="dismissed">Dismissed</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterSeverity} onValueChange={setFilterSeverity}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Filter by Severity" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Severity</SelectItem>
                <SelectItem value="critical">Critical</SelectItem>
                <SelectItem value="high">High</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="low">Low</SelectItem>
              </SelectContent>
            </Select>

            <Select value={filterType} onValueChange={setFilterType}>
              <SelectTrigger className="w-48">
                <SelectValue placeholder="Filter by Type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Types</SelectItem>
                <SelectItem value="break_duration">Break Duration</SelectItem>
                <SelectItem value="non_engagement">Non-Engagement</SelectItem>
                <SelectItem value="unethical_behavior">Unethical Behavior</SelectItem>
                <SelectItem value="performance_decline">Performance Decline</SelectItem>
              </SelectContent>
            </Select>
          </div>

          {/* Flags Table */}
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Agent</TableHead>
                <TableHead>Flag Type</TableHead>
                <TableHead>Severity</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>Confidence</TableHead>
                <TableHead>Detected</TableHead>
                <TableHead>Assigned To</TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredFlags.map((flag) => (
                <TableRow key={flag.id}>
                  <TableCell>
                    <div>
                      <p className="font-medium">{flag.agentName}</p>
                      <p className="text-sm text-gray-500">{flag.agentId}</p>
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      {getFlagTypeIcon(flag.flagType)}
                      <span className="capitalize">{flag.flagType.replace("_", " ")}</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant="outline" className={getSeverityColor(flag.severity)}>
                      {flag.severity.toUpperCase()}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className={getStatusColor(flag.status)}>
                        {flag.status.toUpperCase()}
                      </Badge>
                      {flag.escalated && (
                        <Badge variant="outline" className="text-red-600 border-red-200">
                          ESCALATED
                        </Badge>
                      )}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center space-x-2">
                      <div className="w-16 bg-gray-200 rounded-full h-2">
                        <div className="bg-blue-600 h-2 rounded-full" style={{ width: `${flag.confidence}%` }} />
                      </div>
                      <span className="text-sm">{flag.confidence}%</span>
                    </div>
                  </TableCell>
                  <TableCell>
                    <span className="text-sm text-gray-600">{new Date(flag.detectedAt).toLocaleString()}</span>
                  </TableCell>
                  <TableCell>
                    {flag.assignedTo ? (
                      <Badge variant="outline">{flag.assignedTo}</Badge>
                    ) : (
                      <span className="text-gray-400">Unassigned</span>
                    )}
                  </TableCell>
                  <TableCell>
                    <div className="flex space-x-2">
                      <Dialog>
                        <DialogTrigger asChild>
                          <Button variant="outline" size="sm" onClick={() => setSelectedFlag(flag)}>
                            <Eye className="w-3 h-3 mr-1" />
                            View
                          </Button>
                        </DialogTrigger>
                        <DialogContent className="max-w-2xl">
                          <DialogHeader>
                            <DialogTitle>Flag Details - {flag.agentName}</DialogTitle>
                            <DialogDescription>
                              Detailed information about the detected flag and evidence
                            </DialogDescription>
                          </DialogHeader>

                          {selectedFlag && (
                            <div className="space-y-4">
                              {/* Flag Summary */}
                              <div className="grid grid-cols-2 gap-4">
                                <div>
                                  <Label className="text-sm font-medium">Flag Type</Label>
                                  <p className="text-sm text-gray-600 capitalize">
                                    {selectedFlag.flagType.replace("_", " ")}
                                  </p>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium">Severity</Label>
                                  <Badge variant="outline" className={getSeverityColor(selectedFlag.severity)}>
                                    {selectedFlag.severity.toUpperCase()}
                                  </Badge>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium">Confidence</Label>
                                  <p className="text-sm text-gray-600">{selectedFlag.confidence}%</p>
                                </div>
                                <div>
                                  <Label className="text-sm font-medium">Status</Label>
                                  <Badge variant="outline" className={getStatusColor(selectedFlag.status)}>
                                    {selectedFlag.status.toUpperCase()}
                                  </Badge>
                                </div>
                              </div>

                              {/* Description */}
                              <div>
                                <Label className="text-sm font-medium">Description</Label>
                                <p className="text-sm text-gray-600 mt-1">{selectedFlag.description}</p>
                              </div>

                              {/* Evidence */}
                              <div>
                                <Label className="text-sm font-medium">Evidence</Label>
                                <pre className="text-xs bg-gray-50 p-3 rounded border mt-1 overflow-x-auto">
                                  {JSON.stringify(selectedFlag.evidence, null, 2)}
                                </pre>
                              </div>

                              {/* Resolution (if resolved) */}
                              {selectedFlag.resolution && (
                                <div>
                                  <Label className="text-sm font-medium">Resolution</Label>
                                  <div className="mt-1 p-3 bg-green-50 rounded border border-green-200">
                                    <p className="text-sm">
                                      <strong>Action:</strong> {selectedFlag.resolution.action}
                                    </p>
                                    <p className="text-sm mt-1">
                                      <strong>Notes:</strong> {selectedFlag.resolution.notes}
                                    </p>
                                    <p className="text-sm mt-1">
                                      <strong>Resolved by:</strong> {selectedFlag.resolution.resolvedBy}
                                    </p>
                                    <p className="text-sm mt-1">
                                      <strong>Date:</strong>{" "}
                                      {new Date(selectedFlag.resolution.timestamp).toLocaleString()}
                                    </p>
                                  </div>
                                </div>
                              )}

                              {/* Resolution Form (if active) */}
                              {selectedFlag.status === "active" && (
                                <div className="space-y-4 border-t pt-4">
                                  <h4 className="font-medium">Resolve Flag</h4>

                                  <div>
                                    <Label htmlFor="resolution-action">Resolution Action</Label>
                                    <Select value={resolutionAction} onValueChange={setResolutionAction}>
                                      <SelectTrigger>
                                        <SelectValue placeholder="Select action" />
                                      </SelectTrigger>
                                      <SelectContent>
                                        <SelectItem value="coaching_session">Coaching Session</SelectItem>
                                        <SelectItem value="verbal_warning">Verbal Warning</SelectItem>
                                        <SelectItem value="written_warning">Written Warning</SelectItem>
                                        <SelectItem value="training_required">Additional Training</SelectItem>
                                        <SelectItem value="dismissed">Dismiss Flag</SelectItem>
                                        <SelectItem value="escalate">Escalate to Manager</SelectItem>
                                      </SelectContent>
                                    </Select>
                                  </div>

                                  <div>
                                    <Label htmlFor="resolution-notes">Resolution Notes</Label>
                                    <Textarea
                                      id="resolution-notes"
                                      placeholder="Enter detailed notes about the resolution..."
                                      value={resolutionNotes}
                                      onChange={(e) => setResolutionNotes(e.target.value)}
                                      rows={3}
                                    />
                                  </div>

                                  <div className="flex space-x-2">
                                    <Button
                                      onClick={() => handleResolveFlag(selectedFlag.id)}
                                      disabled={!resolutionAction || !resolutionNotes}
                                    >
                                      Resolve Flag
                                    </Button>
                                    <Button variant="outline" onClick={() => handleEscalateFlag(selectedFlag.id)}>
                                      Escalate
                                    </Button>
                                  </div>
                                </div>
                              )}
                            </div>
                          )}
                        </DialogContent>
                      </Dialog>

                      {flag.status === "active" && (
                        <Button variant="outline" size="sm" onClick={() => handleEscalateFlag(flag.id)}>
                          Escalate
                        </Button>
                      )}
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  )
}
